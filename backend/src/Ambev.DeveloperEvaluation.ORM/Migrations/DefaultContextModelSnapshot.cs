// <auto-generated />
using System;
using Ambev.DeveloperEvaluation.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ambev.DeveloperEvaluation.ORM.Migrations
{
    [DbContext(typeof(DefaultContext))]
    partial class DefaultContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.User", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasDefaultValueSql("gen_random_uuid()");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.Property<string>("Phone")
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnType("character varying(20)");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.Property<int>("Role")
                    .HasColumnType("integer");

                b.Property<int>("Status")
                    .HasColumnType("integer");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp without time zone");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("timestamp without time zone");

                b.OwnsOne("Ambev.DeveloperEvaluation.Domain.Entities.Name", "Name", nb =>
                {
                    nb.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    nb.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    nb.WithOwner();
                });

                b.OwnsOne("Ambev.DeveloperEvaluation.Domain.Entities.Address", "Address", ab =>
                {
                    ab.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    ab.Property<string>("Street")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    ab.Property<int>("Number")
                        .HasColumnType("integer");

                    ab.Property<string>("Zipcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    ab.OwnsOne("Ambev.DeveloperEvaluation.Domain.Entities.Geolocation", "Geolocation", gb =>
                    {
                        gb.Property<string>("Lat")
                            .HasColumnType("character varying(50)");

                        gb.Property<string>("Long")
                            .HasColumnType("character varying(50)");

                        gb.WithOwner();
                    });

                    ab.WithOwner();
                });

                b.HasKey("Id");
                b.ToTable("Users");
            });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Product", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid").HasDefaultValueSql("gen_random_uuid()");
                b.Property<string>("Title").IsRequired().HasMaxLength(100);
                b.Property<decimal>("Price").HasColumnType("decimal(10,2)");
                b.Property<string>("Description").HasMaxLength(500);
                b.Property<string>("Category").HasMaxLength(50);
                b.Property<string>("Image").HasMaxLength(255);
                b.Property<double?>("RatingRate").HasColumnType("double precision");
                b.Property<int?>("RatingCount").HasColumnType("int");

                b.HasKey("Id");
                b.ToTable("Products");
            });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Cart", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid").HasDefaultValueSql("gen_random_uuid()");
                b.Property<Guid>("UserId").HasColumnType("uuid");

                b.HasKey("Id");
                b.HasIndex("UserId");
                b.ToTable("Carts");
            });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.CartItem", b =>
            {
                b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid").HasDefaultValueSql("gen_random_uuid()");
                b.Property<Guid>("CartId").HasColumnType("uuid");
                b.Property<Guid>("ProductId").HasColumnType("uuid");
                b.Property<int>("Quantity").HasColumnType("int");

                b.HasKey("Id");
                b.HasIndex("CartId");
                b.HasIndex("ProductId");
                b.ToTable("CartItems");
            });
        }
    }
}
